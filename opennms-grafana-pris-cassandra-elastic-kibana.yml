version: '2'
services:
  db_data:
    image: tianon/true
    volumes:
        - ./postgres-data:/var/lib/postgresql/data
  database:
    image: postgres:9.6.1
    env_file:
      - .postgres.env
    ports:
      - "5432:5432"
    depends_on:
      - db_data
    volumes_from:
      - db_data:rw
  opennms_data:
    image: tianon/true
    volumes:
        - /var/log/opennms
        - /var/opennms/rrd
        - /var/opennms/reports
       # - /opt/opennms/etc
  opennms:
    image: opennms/horizon-core-web:20.0.0-1
    env_file:
      - .opennms.env
      - .postgres.env
    depends_on:
      - database
      - opennms_data
      - cassandra
      - elasticsearch
    volumes_from:
      - opennms_data:rw
    volumes:
      - ./opennms-etc:/opt/opennms/etc
    command: ["-s"]
    ports:
      - "8980:8980"
      - "18980:18980"
      - "1099:1099"
      - "8101:8101"
      - "61616:61616"
      - "5817:5817"
      - "162:162/udp"
      
  pris:
    image: opennms/pris:1.1.5
    ports:
      - "8000:8000"
    volumes:
      - ./pris-requisitions:/opt/opennms-pris/requisitions
      
  grafana:
    image: grafana/grafana:4.1.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .grafana.env
    ports:
      - "3000:3000"

# see https://hub.docker.com/r/_/cassandra/      
# see https://github.com/JasonGiedymin/docker-cassandra-cluster

  cassandra_data:
    image: tianon/true
    volumes:
       - ./cassandra-data:/var/lib/cassandra
       
  cassandra:
    image: cassandra:3.10
    command: /bin/bash -c "sleep 1 && echo ' -- Pausing to let system catch up ... -->' && /docker-entrypoint.sh cassandra -f"
    volumes_from:
       -  cassandra_data:rw
    ports:
       - "7000:7000"
       - "7001:7001"
       - "9042:9042"
       - "9160:9160"
       - "7199:7199"

# bitnami
#  cassandra_data:
#    image: tianon/true
#    volumes:
#        - /bitnami/cassandra
#        
#  cassandra:
#      image: bitnami/cassandra:3.10-r7
#      volumes_from:
#        -  cassandra_data:rw
#      env_file:
#         - .cassandra.env
#      ports:
#        - "7000:7000"
#        - "7001:7001"
#        - "9042:9042"
#        - "9160:9160"
#        - "7199:7199"
        

  elastic_data: 
      image: tianon/true
      volumes:
      - ./elastic-data:/bitnami/elasticsearch
      
  elasticsearch:
      image: bitnami/elasticsearch:5.4.3-r1 # needs much more memory 2g
     # image: bitnami/elasticsearch:2.4.4-r2
      env_file:
      - .elastic.env
      ports:
        - "9200:9200"
        - "9300:9300"
      volumes_from:
        - elastic_data:rw
        
  kibana_data: 
      image: tianon/true
      volumes:
      - ./kibana-data:/bitnami/kibana
      
  kibana:
    image: 'bitnami/kibana:5.4.3-r0'
    ports:
      - 5601:5601
    environment:
      - KIBANA_ELASTICSEARCH_URL=elasticsearch
    volumes_from:
      - kibana_data:rw
      
  nginx:
    image: 'bitnami/nginx:1.12.0-r4'
    ports:
      - '80:80'       # http
      - '443:443'     # https
      - '18000:18000' # pris
      - '15601:15601' # kibana pw protected
      - '19200:19200' # elasticsearch pw protected
    volumes:
      - ./nginx-conf/vhosts:/bitnami/nginx/conf/vhosts
      - ./nginx-conf/passwords:/bitnami/nginx/conf/passwords
      - ./nginx-conf/app:/app
      
  minion:
    image: opennms/minion:20.0.0-1
    env_file:
      - .minion.env
    volumes:
        - /opt/minion/etc
        - /opt/minion/data
        # default credentials contains opennms.http minion minion and opennms.broker minion minion
        - ./minion-conf/minion.minion.scv.jce:/opt/minion/etc/scv.jce
    command: ["-f"]
    ports:
      - "8201:8201"
      - "28980:18980" # avoid duplicate with opennms
      - "1162:162/udp" # snmp trap receiver
      - "11514:514/udp" # logs
      
# used  to find all containers :)
#  dockerdns:
#    image: bfoote/docker-dns:0.2.6
#    volumes:
#      - ./dockerdns-conf/config.js.opennms:/opt/docker-dns/config/config.js
#      - /var/run/docker.sock:/var/run/docker.sock
#    command: ["supervisord", "-n"]
#    ports: 
#      - "10053:53/udp"

  devdns:
    image: ruudud/devdns:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports: 
      - "10053:53/udp"





     